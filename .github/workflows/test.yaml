name: GH actions testing
run-name: GH actions testing
on: [push]

jobs:
  get-changes-for-envs:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Outputs all changed envs in a json format to start matrix jobs
    outputs:
      matrix: ${{  steps.verify-changed-files.outputs.any_changed && steps.list-all.outputs.folders || steps.get-dir-names.outputs.dir_names }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0


    # Check if there has been changes to the Dockerfile or the docker build workflow
    # If there are changes to either of these files, we want to rebuild ALL images.
      - name: Verify Changed files
        uses: tj-actions/changed-files@v34
        id: verify-changed-files
        with:
          files: |
            Dockerfile
            .github/workflows/portal-docker-build.yml


      - name: get-all-folders-if-big-change
        id: list-all
        if: steps.verify-changed-files.outputs.any_changed == 'true'
        run: |
          folders=$(tree -J -d -L 1 ./configurations | jq -c '.[0].contents | map(.name)')
          echo $folders
          echo "folders=$folders" >> $GITHUB_OUTPUT



      # Only check for changed files if it's not a change to the Dockerfile or the docker-build workflow
      # Changed to Dockerfile or docker-build-workflow will trigger builds for every environment.
      - name: Check changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          files: |
            configurations/*/portal/**
          dir_names: true
          json: true

      - name: Get dir names
        id: get-dir-names
        uses: actions/github-script@v6
        with:
          script: |
            const folders = JSON.parse("${{ steps.changed-files.outputs.all_changed_files }}");
            const newArr = [];
            for (let folder of folders) {
              const folderNameParts = folder.split('/');
              const folderName = `${folderNameParts[1]}`
              if (!newArr.includes(folderName)) {
                  newArr.push(folderName)
              }
            }
            core.setOutput('dir_names', JSON.newArr)


  matrix-builder-job:
    name: ${{ matrix.environments }} - gen3 data portal build
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [get-changes-for-envs]
    if: ${{ needs.get-changes-for-envs.outputs.matrix != '[]' && needs.get-changes-for-envs.outputs.matrix != '' }}
    strategy:
      matrix:
        environments: ${{ fromJSON(needs.get-changes-for-envs.outputs.matrix) }}
      max-parallel: 10
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set branch for data-portal code Checkout
        id: branch
        run: |
          branch="master"
          [ -f configurations/${{ matrix.environments  }}/portal-branch ] && branch=$(cat configurations/$i/portal-branch)
          echo "branch=${branch}" >> $GITHUB_OUTPUT


      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: uc-cdis/data-portal
          path: "./data-portal"
          ref: ${{ steps.branch.outputs.branch }}
